{
	"info": {
		"_postman_id": "c60cb1e4-4e2d-4c9b-8619-a6404c2fb8e0",
		"name": "API SafetyNetAlerts",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27069653"
	},
	"item": [
		{
			"name": "CRUD",
			"item": [
				{
					"name": "Persons",
					"item": [
						{
							"name": "Persons",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/persons",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"persons"
									]
								}
							},
							"response": []
						},
						{
							"name": "Person",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Boyd\",\r\n    \"address\": \"1509 Culver St\",\r\n    \"city\": \"Culver\",\r\n    \"zip\": \"97451\",\r\n    \"phone\": \"841-874-6512\",\r\n    \"email\": \"jaboyd@email.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/person",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"person"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "Person",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Boyd\",\r\n    \"address\": \"1509 Culver St\",\r\n    \"city\": \"Culver\",\r\n    \"zip\": \"97451\",\r\n    \"phone\": \"123\",\r\n    \"email\": \"jaboyd@email.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/person",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"person"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "FireStations",
					"item": [
						{
							"name": "FireStations",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/firestations",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"firestations"
									]
								}
							},
							"response": []
						},
						{
							"name": "FireStationMapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/firestation?address=1509 Culver St&stationNumber=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"firestation"
									],
									"query": [
										{
											"key": "address",
											"value": "1509 Culver St"
										},
										{
											"key": "stationNumber",
											"value": "3"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "FireStationMapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"1509 Culver St\",\r\n    \"station\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/firestation",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"firestation"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "FireStationMapping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"address\": \"1509 Culver St\",\r\n    \"station\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/firestation",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"firestation"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "MedicalRecords",
					"item": [
						{
							"name": "MedicalRecords",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/medicalRecords",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"medicalRecords"
									]
								}
							},
							"response": []
						},
						{
							"name": "MedicalRecord",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/medicalRecord?firstName=John&lastName=Boyd",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"medicalRecord"
									],
									"query": [
										{
											"key": "firstName",
											"value": "John"
										},
										{
											"key": "lastName",
											"value": "Boyd"
										}
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "MedicalRecord",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Boyd\",\r\n    \"birthdate\": \"03/06/1984\",\r\n    \"medications\": [\r\n        \"aznol:350mg\",\r\n        \"hydrapermazol:100mg\"\r\n    ],\r\n    \"allergies\": [\r\n        \"nillacilan\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/medicalRecord",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"medicalRecord"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "MedicalRecord",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful DELETE request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Boyd\",\r\n    \"birthdate\": \"11/23/2000\",\r\n    \"medications\": [\r\n        \"aznol:350mg\"\r\n    ],\r\n    \"allergies\": [\r\n        \"shellfish\",\r\n        \"xilliathal\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/medicalRecord",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"medicalRecord"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Specific queries",
			"item": [
				{
					"name": "FireStationCoverage",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/firestation?stationNumber=3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"firestation"
							],
							"query": [
								{
									"key": "stationNumber",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ChildAlert",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/childAlert?address=1509 Culver St",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"childAlert"
							],
							"query": [
								{
									"key": "address",
									"value": "1509 Culver St"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PhoneAlert",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/phoneAlert?firestation=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"phoneAlert"
							],
							"query": [
								{
									"key": "firestation",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FireAddressInfo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/fire?address=1509 Culver St",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"fire"
							],
							"query": [
								{
									"key": "address",
									"value": "1509 Culver St"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FloodStationCoverage",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/flood/stations?stations=1,3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"flood",
								"stations"
							],
							"query": [
								{
									"key": "stations",
									"value": "1,3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PersonInfo",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/personInfo?firstName=John&lastName=Boyd",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"personInfo"
							],
							"query": [
								{
									"key": "firstName",
									"value": "John"
								},
								{
									"key": "lastName",
									"value": "Boyd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CommunityEmail",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/communityEmail?city=Culver",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"communityEmail"
							],
							"query": [
								{
									"key": "city",
									"value": "Culver"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}